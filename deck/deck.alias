<drac2>
args = &ARGS&
N,ZERO_SPACE,TRIPLE_BACK_TICKS = "\n","\u200c","`"+"`"+"`"
VARNAME = "custom_decks"
FOOTER_STRING = "!deck | v1.2.0 | Lovingly made by @""Love-chan#5252"

c = combat()
character_pic = image

using(
    decklib = "7a689cb6-4591-4aeb-8e5a-d56c9b5c002b",
    json="c0a7533c-6376-41e9-8c03-18f7742668e5",
    numbertool="8f4557ba-39bc-4408-be36-d3c68b6544cf",

    ## Pronouns module by Lathaon#6649
    pronouns="2c4012a3-accd-4fcf-a5e2-30bb51800c4e"
    )

character().set_cvar_nx("deck_settings", dump_yaml({"auto_shuffle":False}))
autoshuffle_on_reset = load_yaml(character().get_cvar("deck_settings"))["auto_shuffle"]

if decklib.use_shared_deck:
    possessive = "the"
else:
    possessive = pronouns.their()    

their = pronouns.their()
they = pronouns.they()

def help_embed():
    return ("embed "
            + f""" -title "{name} needs some help with `!deck`!" """
            + " -desc "
            + '\"'
            + "Use `!deck draw` to draw 1 card, or `!deck draw [#]` to draw # amount of cards!"
            + N + N
            + "Use `!deck hand` to check the contents of your hand!"
            + N + N
            + "Use `!deck discard` to move all of the cards from your hand to your discard pile!"
            + N + N
            + "Use `!deck discard [card names]` to select and discard specific cards."
            + N + N
            + "Use `!deck reset` to completely reset your drawpile to the currently selected deck. In shared card initiative, everyone must discard their cards first, or else it's called cheating!"
            + N + f"*Automatic shuffling on reset: `{autoshuffle_on_reset}`*"
            + N + N
            + "Use `!deck shuffle` to shuffle your draw pile."
            + N + N
            + "Use `!deck reshuffle` or `!deck shuffle discard` to shuffle your discard pile into your draw pile."
            + N + N
            + "Use `!deck select` to select a different deck! Read the options carefully!"
            + N + N
            + "Use `!deck init` to check the current state of the shared deck initiative. Characters in shared deck initiative share the same draw pile, discard pile, and exhaust pile."
            + N + N
            + "Use `!deck init join` to start sharing your cards with other players! (The first character to join sets the initiative's card piles to their own.)"
            + '\"'
            + f""" -footer "{FOOTER_STRING}" -thumb "{character_pic}" """
    )

## THIS IS THE HELP EMBED. IT COMES BEFORE ALL OF THE OTHER EMBEDS BECAUSE THEY CHECK FOR args[0]
## AND IT WILL ERROR IF IT TRIES TO CHECK THAT AND THERE ARE NO ARGS.
if not args or "help" in args[:1]:
    return help_embed()

if "draw" == args[0]:
    
    cardhand_display_fields = decklib.generate_fields(
        decklib.get_card_display_names(
            decklib.cardhand
        ),
        "**Cards Already In Hand:**"
        )
    
    card_str = decklib.current_cards_str()

    if len(drawpile) == 0:
        return f"""embed -title "{name} has no cards left to draw!" -desc "{card_str}" {cardhand_display_fields} -footer "{FOOTER_STRING}" -thumb "{character_pic}" """

    draw_err = ""
    cards_drawn = 1

    if len(args) >= 2:
        if numbertool.isint(args[1]):
            cards_drawn = max(
                1, 
                min(int(args[1]), len(drawpile))
                )
        else:
            if (bad_args := args[1].replace('"', '\\"')):
                draw_err = f"""-f "Oops!|You inputted `{bad_args}` instead of how many cards you wanted to draw! Only whole, positive numbers will be accepted! Only 1 card will be drawn otherwise." """

    drawn = decklib.draw(
        decklib.drawpile,
        cards_drawn
    )
    decklib.set_drawpile(decklib.drawpile)

    card_str = decklib.current_cards_str()

    drawn_display_fields = decklib.generate_fields(
        decklib.get_card_display_names(
            drawn
        ),
        "**Drawn Cards:**"
    )
    
    return f"""embed -title "{name} draws {cards_drawn} {"card" if cards_drawn==1 else "cards"} from {possessive} draw pile and adds {"it" if cards_drawn==1 else "them"} to {their} hand!" -desc "*Drawn from {decklib.deckload["deckname"]}.*{N + N + card_str}" {drawn_display_fields} {cardhand_display_fields} {draw_err} -footer "{FOOTER_STRING}" -thumb "{character_pic}" """
## """
## Use `!deck draw` to draw 1 card, or `!deck draw [#]` to draw # amount of cards!
## """

if "hand" == args[0]:

    card_str = decklib.current_cards_str()

    hand_display_fields = decklib.generate_fields(
        decklib.get_card_display_names(
            decklib.cardhand
        ),
        "Cards In Hand:"
    )

    handphrases = load_json(
                    f"""["checks", "takes a peek at", "browses", "sifts through", "couldn't memorize",
                    "shows the table", "cheats at", "remembers {they} can look at", "needs a card from", "can't believe",
                    "forgor", "forgot", "is tempted to savescum", "deliberates", "reconsiders",
                    "wants to pull {their} hair out over", "considers bluffing with", "scries", "indexes",
                    "processes", "comes to terms with", "makes enemies with", "wants to bet on",
                    "might lose everything with", "makes goo-goo eyes at", "isn't too proud of",
                    "feasts {their} eyes on", "generates endless synonyms with", "swears at",
                    "FINALLY realizes that the title of this embed is as random as the minecraft loading screen with",
                    "rolled a nat 20 with", "rolled a nat 1 with", "might have a good", "messes with",
                    "fidgets with", "worries over", "reads fine literature with", "is bleeding",
                    "wants to DM Love-chan#5252 with a suggestion for the text that appears when {they} {pronouns.verb('checks', 'check')}",
                    "verbs", "has a sudden compulsion to eat", "wants to throw out",
                    "can't tell the difference between garbage and", "sobs at floor 1 jaw worm with",
                    "is praying to snecko as {they} {pronouns.verb('sobs', 'sob')} at", "husks at", "<:husk:994063369655042069>'s at"]"""
                )
    handphrase = randchoice(handphrases)

    return f"""embed -title "{name} {handphrase} {their} hand!" -desc "{card_str}" {hand_display_fields} -footer "{FOOTER_STRING}" -thumb "{character_pic}" """
## """
## Use `!deck hand` to check the contents of your hand!
## """

if "exhaust" == args[0]:
    if len(args) >= 2:
        # Exhausts only the specified cards from the hand.
        exhausted = decklib.exhaust(
            decklib.match(
                args[1:],
                decklib.cardhand
            ),
            decklib.cardhand
        )
    
        decklib.set_cardhand(decklib.cardhand)

        exhausted = ["~~*" + i + "*~~" for i in decklib.get_card_display_names(exhausted)]

        exhausted_display_fields = decklib.generate_fields(exhausted, "**Exhausted Cards:**")

        cardhand_display_fields = decklib.generate_fields(decklib.get_card_display_names(decklib.cardhand), "**Cards In Hand:**")

        card_str = decklib.current_cards_str()

        return f"""embed -title "{name} {'exhausts' if exhausted else 'tries to exhaust'}!" -desc "{card_str}{N + N + '`No matches found!`' if not exhausted else ''}" {cardhand_display_fields} {exhausted_display_fields} -footer "{FOOTER_STRING}" -thumb "{character_pic}" """
    else:
        return f"""embed -title "{name} tries to exhaust!" -desc "You didn't select any cards! Try `!deck exhaust [name of card]`." -footer "{FOOTER_STRING}" -thumb "{character_pic}" """

if "discard" == args[0]:
    if len(args) >= 2:
        ## Discards only the specified cards if specified cards are provided.
        ## Also sets the hand post-discarding.

        discarded = decklib.discard(
            decklib.match(
                args[1:],
                decklib.cardhand
            ),
            decklib.cardhand
        )

        decklib.set_cardhand(decklib.cardhand)

        ## Gets the names of the discarded cards and italicizes them for display.
        discarded = ["*" + i + "*" for i in decklib.get_card_display_names(discarded)]

        ## Turns the fetched, italicized names into fields for the output.
        discard_display_fields = decklib.generate_fields(discarded, "**Discarded Cards:**")

        ## Fetches names and creates fields to show the remaining cardhand for display.
        cardhand_display_fields = decklib.generate_fields(decklib.get_card_display_names(decklib.cardhand), "**Cards In Hand:**")

        card_str = decklib.current_cards_str()

        return f"""embed -title "{name} {'discards' if discarded else 'tries to discard'}!" -desc "{card_str}{N + N + '`No matches found!`' if not discarded else ''}" {cardhand_display_fields} {discard_display_fields} -footer "{FOOTER_STRING}" -thumb "{character_pic}" """

    else:
        ## Discards the entire hand.
        discarded = decklib.discard(
            decklib.cardhand,
            decklib.cardhand
        )

        decklib.set_cardhand(decklib.cardhand)

        discarded = ["*" + i + "*" for i in decklib.get_card_display_names(discarded)]

        discard_display_fields = decklib.generate_fields(
            discarded,
            "**Discarded Cards:**"
        )

        card_str = decklib.current_cards_str()

        return f"""embed -title "{name} discards {their} hand!" -desc "*Hand placed on top of discard pile.*{N + N + card_str}" {discard_display_fields} -footer "{FOOTER_STRING}" -thumb "{character_pic}" """
## """
## Use `!deck discard` to move all of the cards from your hand to your discard pile!
## {N+N}
## Use `!deck discard [card names]` to select and discard specific cards.
## """

if "reset" == args[0]:
    if len(args) >= 2:
        if autoshuffle_on_reset:
            new_autoshuffle = False
        else:
            new_autoshuffle = True
        character().set_cvar("deck_settings", dump_yaml({"auto_shuffle":new_autoshuffle}))
        return f"""embed -title "{name} toggles automatic shuffling on deck reset!" -desc "Toggle automatic shuffling-on-reset with `!deck reset automatic`!{N}*Automatic shuffling on reset: `{new_autoshuffle}`*" -footer "{FOOTER_STRING}" -thumb "{character_pic}" """
    
    drawpile = decklib.reset_deck()
    
    if autoshuffle_on_reset:
        decklib.set_drawpile(decklib.shuffle(decklib.drawpile))
        shuffle_msg = "*Drawpile automatically shuffled!*"
    else: 
        shuffle_msg = f"*Remember to shuffle! (`!deck shuffle`)*{N}*Toggle automatic shuffling-on-reset with `!deck reset automatic`!*"
    
    card_str = decklib.current_cards_str()

    return f"""embed -title "{name} resets {possessive} cards!" -desc "*Draw pile reset to `{decklib.deckload["deckname"]}`.*{N + N + card_str + N + N + shuffle_msg}" -footer "{FOOTER_STRING}" -thumb "{character_pic}" """
## """
## Use `!deck reset` to completely reset your drawpile to the currently selected deck. In shared card initiative, everyone must discard their cards first, or else it's called cheating!
## {N}Automatic shuffling on reset: `{autoshuffle_on_reset}`
## """

def reshuffle():
    shuffled = decklib.shuffle(decklib.drawpile + decklib.discardpile)

    decklib.set_drawpile(shuffled)
    decklib.set_list(decklib.drawpile, shuffled)
    
    decklib.set_discardpile([])
    decklib.set_list(decklib.discardpile, [])

    card_str = decklib.current_cards_str()
    
    return f"""embed -title "{name} shuffles {possessive} discard pile into {possessive} draw pile!" -desc "*Discard pile shuffled into draw pile.*{N + N + card_str}" -footer "{FOOTER_STRING}" -thumb "{character_pic}" """ 

if "reshuffle" == args[0]:
    return reshuffle()

if "shuffle" == args[0]:
    if len(args) >= 2:
        if args[1] in "discarded":
            return reshuffle()

    shuffled = decklib.shuffle(decklib.drawpile)
    decklib.set_drawpile(shuffled)
    card_str = decklib.current_cards_str()
    return f"""embed -title "{name} shuffles {possessive} draw pile!" -desc "*Drawpile shuffled containing no new cards.*{N + N}Use `!deck reset` to completely reset your cards.{N + N}Use `!deck shuffle discard` or `!deck reshuffle` to shuffle your discard pile into your draw pile.{N + N + card_str}" -footer "{FOOTER_STRING}" -thumb "{character_pic}" """
## """
## Use `!deck shuffle` to shuffle your draw pile.
## {N+N}
## Use `!deck reshuffle` or `!deck shuffle discard` to shuffle your discard pile into your draw pile.
## """

if "select" == args[0] or "load" == args[0]:
    detailedsources = []
    [[detailedsources.append(f"{deckname} _(`{gvar}` in __alias default decks__)_") for deckname in load_json(get_gvar(gvar))] for gvar in decklib.DEFAULT_DECKS]
   
    deckvars = [] + decklib.DEFAULT_DECKS

    if get_svar(VARNAME):
        svargvars = [gvar for gvar in load_json(get_svar(VARNAME))]
        deckvars = deckvars + svargvars
        [[detailedsources.append(f"{deckname} _(`{gvar}` in __svar__)_") for deckname in load_json(get_gvar(gvar))] for gvar in svargvars]
    
    if get_uvar(VARNAME):
        uvargvars = [gvar for gvar in load_json(get_uvar(VARNAME))]
        deckvars = deckvars + uvargvars
        [[detailedsources.append(f"{deckname} _(`{gvar}` in __uvar__)_") for deckname in load_json(get_gvar(gvar))] for gvar in uvargvars]
    
    iteration = 0
    sourceselect = {}
    for gvar in deckvars: 
        for deckname in load_json(get_gvar(gvar)):
            iteration = iteration + 1
            sourceselect.update({str(iteration):{"deckname":deckname, "gvar":gvar}})
    
    sourcedisplay = [str("`" + (i+1) + "`: " + v) for i, v in enumerate(detailedsources)]

    if len(args) >= 2:
        if str(args[1]) in sourceselect:
            userselection = sourceselect[str(args[1])]
            decklib.set_deckload(userselection)

            decklib.deckLoaded.clear()
            decklib.deckLoaded.update((load_json(get_gvar(userselection["gvar"])))[userselection["deckname"]])  #sets the selected deck as deckLoaded for use in reset_deck()
            drawpile = decklib.reset_deck()  #calls on fresh_deck() which calls on deckLoaded
            ## ^^ sets drawpile for use in decklib.current_cards_str()

            if autoshuffle_on_reset:
                decklib.set_drawpile(decklib.shuffle(decklib.drawpile))
                shuffle_msg = "*Drawpile automatically shuffled!*"
            else: 
                shuffle_msg = f"*Remember to shuffle! (`!deck shuffle`)*{N}*Toggle automatic shuffling-on-reset with `!deck reset automatic`!*"

            if decklib.use_shared_deck:
                personal_or_shared_deckload = '**Shared \\"deckload\\" Set To:**'
                personal_or_shared_deckpreview = "**Sample of Selected Deck:**"
                personal_or_shared_title = f"{name} sets {userselection['deckname']} as the new shared initiative deck!"
            else:
                personal_or_shared_deckload = '**Cvar \\"deckload\\" Set To:**'
                personal_or_shared_deckpreview = "**Sample of New Shared Deck:**"
                personal_or_shared_title = f"{name} sets {userselection['deckname']} as {their} active deck!"

            deckloadpreview = (personal_or_shared_deckload
                                + TRIPLE_BACK_TICKS
                                + "yaml"
                                + N
                                + dump_yaml(userselection)
                                + TRIPLE_BACK_TICKS)
            
            get_deck = (load_json(get_gvar(userselection["gvar"])))[userselection["deckname"]]

            deckpreviewtext = (personal_or_shared_deckpreview
                               + TRIPLE_BACK_TICKS
                               + 'json'
                               + N
                               + (decklib.cutstring(
                                    json.format_json(get_deck),
                                    400)
                                 ).replace('"', '\\"')
                               + TRIPLE_BACK_TICKS)

            card_str = decklib.current_cards_str()

            return f"""embed -title "{personal_or_shared_title}" -desc "*Draw pile set to `{userselection["deckname"]}`.*{N + N + card_str + N + N + shuffle_msg + N + N + deckloadpreview + N + deckpreviewtext}" -footer "{FOOTER_STRING}" -thumb "{character_pic}" """
    
    return f"""embed -title "{name} wants to select a deck!" -desc "**Deck Options and Sources:**{N + '- ' + (N + '- ').join(sourcedisplay) + N + N}To set your selected deck, please use `!deck select #` replacing `#` with the number of the Deck you would like to select." -footer "{FOOTER_STRING}" -thumb "{character_pic}" """
## """
## Use `!deck select` to select a different deck! Read the options carefully!
## """

if "init" == args[0] or "i" == args[0]:
    if len(args) >= 2:
        if "join" == args[1] and c:
            if c.me:
                init_dataset_message = ""

                if not c.get_metadata(decklib.COMBAT_DECKLOAD_NAME):
                    c.set_metadata(decklib.COMBAT_DECKLOAD_NAME, dump_yaml(decklib.deckload))
                    init_dataset_message += ("*Init deckload set to your current deckload.*"
                                             + N)

                if not (combat_drawpile := c.get_metadata(decklib.COMBAT_DRAWPILE_NAME)):
                    c.set_metadata(decklib.COMBAT_DRAWPILE_NAME, dump_json(decklib.drawpile))
                    init_dataset_message += ("*Init drawpile set to your current drawpile.*"
                                             + N)
                else:
                    decklib.set_list(decklib.drawpile, load_json(combat_drawpile))

                if not (combat_discardpile := c.get_metadata(decklib.COMBAT_DISCARDPILE_NAME)):
                    c.set_metadata(decklib.COMBAT_DISCARDPILE_NAME, dump_json(decklib.discardpile))
                    init_dataset_message += ("*Init discardpile set to your current discardpile.*"
                                             + N)
                else:
                    decklib.set_list(decklib.discardpile, load_json(combat_discardpile))

                if not (combat_exhaustpile := c.get_metadata(decklib.COMBAT_EXHAUSTPILE_NAME)):
                    c.set_metadata(decklib.COMBAT_EXHAUSTPILE_NAME, dump_json(decklib.exhaustpile))
                    if (character().levels.get("Cardistor")>=1 or len(decklib.exhaustpile)>0):
                        init_dataset_message += ("*Init exhaustpile set to your current exhaustpile.*"
                                                 + N)
                else:
                    decklib.set_list(decklib.exhaustpile, load_json(combat_exhaustpile))

                c.set_metadata(combat_hand_name, dump_json(decklib.cardhand))
                handlen = len(decklib.cardhand)
                if handlen > 0:
                    cheatmsg = f" Carried over {handlen} " + ("cards." if handlen != 1 else "card.")
                else:
                    cheatmsg = ""
                init_dataset_message += ("*Hand in init set to your current hand."
                                        + cheatmsg
                                        + "*"
                                        + N)

                init_dataset_message += N + decklib.current_cards_str()

                c.me.add_effect(
                    decklib.COMBAT_EFFECT_NAME,
                    desc=f"{name} is sharing a drawpile, discardpile, and exhaustpile with the other card players in initiative."
                )
                return f"""embed -title "{name} is now sharing cards with other creatures in initiative!" -desc "{init_dataset_message}" -f "{name}|**Effect:** {decklib.effect_preview(c.me.get_effect(COMBAT_EFFECT_NAME))}" -footer "{FOOTER_STRING}" -thumb "{character_pic}" """

            else:
                return f"""embed -title "{name} can't join the card players!" -desc "{name} isn't in initiative!" -footer "{FOOTER_STRING}" -thumb "{character_pic}" """

    ## Just shows some information about the current shared initiative.
    if c:
        card_players = [combatant.name for combatant in c.combatants if combatant.get_effect(decklib.COMBAT_EFFECT_NAME)]
        if card_players:
            card_player_msg = "`" + "`, `".join(card_players) + "`" + f"{'is' if len(card_players) == 1 else 'are'} currently sharing cards."
        else:
            card_player_msg = "There are currently no creatures sharing cards in initiative."

        combat_card_data = ""

        if (deckload := c.get_metadata(decklib.COMBAT_DECKLOAD_NAME)):
            combat_card_data += ("**Combat Deckload:**"
                                + TRIPLE_BACK_TICKS
                                + "yaml"
                                + N
                                + deckload
                                + TRIPLE_BACK_TICKS)
        else:
            combat_card_data += '**No Combat \\"deckload\\" set.**' + N + N
        
        if (combat_drawpile := c.get_metadata(decklib.COMBAT_DRAWPILE_NAME)):
            decklib.set_list(decklib.drawpile, load_json(combat_drawpile))
        else:
            decklib.set_list(decklib.drawpile, [])
        
        if (combat_discardpile := c.get_metadata(decklib.COMBAT_DISCARDPILE_NAME)):
            decklib.set_list(decklib.discardpile, load_json(combat_discardpile))
        else:
            decklib.set_list(decklib.discardpile, [])

        
        if (combat_exhaustpile := c.get_metadata(decklib.COMBAT_EXHAUSTPILE_NAME)):
            decklib.set_list(decklib.exhaustpile, load_json(combat_exhaustpile))
        else:
            decklib.set_list(decklib.exhaustpile, [])

        combat_card_data += decklib.current_cards_str(force_shared=True)
        
        return f"""embed -title "{name} checks on the current shared deck!" -desc "{combat_card_data}" -footer "{FOOTER_STRING}" -thumb "{character_pic}" """

    ## Returns if there is no combat to report and there is no `!init join`
    return f"""embed -title "There's no active initiative or shared deck to check on!" -desc "Try sharing your cards by joining initiative, then using `!deck init join`!" -footer "{FOOTER_STRING}" -thumb "{character_pic}" """

## """
## Use `!deck init` to check the current state of the shared deck initiative. Characters in shared deck initiative share the same draw pile, discard pile, and exhaust pile.
## {N}Use `!deck init join` to start sharing your cards with other players! (The first character to join sets the initiative's card piles to their own.)
## """

return help_embed()
</drac2>