# decklib = "7a689cb6-4591-4aeb-8e5a-d56c9b5c002b"
# 
# A module to help handle the various card-storing variables used by
#     the !deck alias. You should include this module in code run by custom
#     cards, epitomally if they deal with discarding or drawing more cards.
# 
# This module is intended to do all of the handling for the !deck alias.
#     Let's hope it actually gets there.
#
# ===== IMPORTANT =====
# 
# These functions are intended to keep your card piles intact. Without them,
#     it's going to be very inconvenient to stop cards from duplicating, disappearing,
#     saving incorrectly, and not showing up in the summary in almost every embed. (That's 
#     the one that says *XX cards remaining in draw pile* and *X cards in hand*)
#
# ===== CVARS =====
# 
# A character playing with !deck has three main card piles, each of which has a cvar:
# - drawpile:     Where cards are drawn from.
# - cardhand:     Where drawn cards are kept.
# - discardpile:  Where cards are put when discarded from the hand.
#
# A character also has two more cvars, more secretive than the last:
# - exhaustpile:  Where cards go to die. Think of it like setting a card on FIRE
#                     so you can't shuffle it back into your drawpile anymore. Only 
#                     a !deck reset can bring these cards back.
# - deckload:     a YAML dictionary of information used to access which deck the
#                     current character is actually using.
#
# Of all of these, deckload is arguably the most important. Without it, the
#     deck cannot be reset.

# -----------------
# |   CONSTANTS   |
# -----------------

COMBAT_EFFECT_NAME = "Playing Cards"
COMBAT_DECKLOAD_NAME = "init_deckload"
COMBAT_DRAWPILE_NAME = "shared_drawpile"
COMBAT_DISCARDPILE_NAME = "shared_discardpile"
COMBAT_EXHAUSTPILE_NAME = "shared_drawpile"

# ---------------------------
# |   IMPORTANT VARIABLES   |
# ---------------------------

_char = character()
_current_combat = combat()

# The shared drawpile name used when use_shared_deck is True.
combat_hand_name = _char.name + "_COMBATHAND" 

# Sets the default for use_shared_deck.
use_shared_deck = False

# Sets the bool use_shared_deck to True if the current character has used
# "!deck init join" to share cards in combat. 
if _current_combat:
    if _current_combat.me:
        if _current_combat.me.get_effect(COMBAT_EFFECT_NAME):
            use_shared_deck = True

# -----------------
# |   FUNCTIONS   |
# -----------------

# ===== UTILITY FUNCTIONS =====

def set_list(list_: list, new_contents: list) -> list:
    """
    Sets the contents of a list to the contents of a new list by transforming it.
    :arg list list_: The list to set the contents of.
    :arg list new_contents: The new contents of the list.
    :return: The list with its new contents.
    :rtype: list
    """

    # Removes all items of the original list.
    list_.clear()
    
    # Adds all the items from new_contents into the original list.
    list_.extend(new_contents)
    
    return list_

# ===== DECK DATA STORING =====

def set_deckload(new_deckload: list):
    """
    Saves new_deckload in the __ cvar or in the init metadata if the char has done !deck init join
    WARNING: You usually do not want to modify the deckload cvar. An invalid deckload is the easiest way to break the alias.
    :arg list new_deckload: The new list to put into the deckload
    :var bool use_shared_deck: Determines where to save new_deckload
    """

    # Saves new_deckload to combat metadata if use_shared_deck is True, and saves it to the cvar otherwise.
    if not use_shared_deck:
        _char.set_cvar("deckload",dump_yaml(new_deckload))
    else:
        _current_combat.set_metadata(COMBAT_DECKLOAD_NAME, dump_yaml(new_deckload))

def set_drawpile(new_drawpile: list):
    """
    Saves new_drawpile in the drawpile cvar or in the init metadata if the char has done !deck init join
    :arg list new_drawpile: The new list to put into the drawpile 
    :var bool use_shared_deck: Determines where to save new_drawpile
    """

    # Saves new_drawpile to combat metadata if use_shared_deck is True, and saves it to the cvar otherwise.
    if not use_shared_deck:
        _char.set_cvar("drawpile", dump_json(new_drawpile))
    else:
        _current_combat.set_metadata(COMBAT_DRAWPILE_NAME, dump_json(new_drawpile))

def set_cardhand(new_hand: list):
    """
    Saves new_hand in the cardhand cvar or in the init metadata if the char has done !deck init join
    :arg list new_hand: The new list to put into the cardhand 
    :var bool use_shared_deck: Determines where to save new_hand
    """

    # Saves new_hand to combat metadata if use_shared_deck is True, and saves it to the cvar otherwise.
    if not use_shared_deck:
        _char.set_cvar("cardhand", dump_json(new_hand))
    else:
        _current_combat.set_metadata(combat_hand_name, dump_json(new_hand))

def set_discardpile(new_discardpile: list):
    """
    Saves new_discardpile in the discardpile cvar or in the init metadata if the char has done !deck init join
    :arg list new_discardpile: The new list to put into the discardpile 
    :var bool use_shared_deck: Determines where to save new_discardpile
    """

    # Saves new_discardpile to combat metadata if use_shared_deck is True, and saves it to the cvar otherwise.
    if not use_shared_deck:
        _char.set_cvar("discardpile", dump_json(new_discardpile))
    else:
        _current_combat.set_metadata(COMBAT_DISCARDPILE_NAME, dump_json(new_discardpile))

def set_exhaustpile(new_exhaustpile):
    """
    Saves new_exhaustpile in the exhaustpile cvar or in the init metadata if the char has done !deck init join
    :arg list new_exhaustpile: The new list to put into the exhaustpile 
    :var bool use_shared_deck: Determines where to save new_exhaustpile
    """

    # Saves new_exhaustpile to combat metadata if use_shared_deck is True, and saves it to the cvar otherwise.
    if not use_shared_deck:
        _char.set_cvar("exhaustpile", dump_json(new_exhaustpile))
    else:
        _current_combat.set_metadata(COMBAT_EXHAUSTPILE_NAME, dump_json(new_exhaustpile))

# ===== DECK MANIPULATION =====

def shuffle(cards: list):
    """
    Shuffles the cards in a list into a random order.
    :arg list cards: The list of cards to be shuffled.
    :return: The shuffled list of cards.
    :rtype: list
    """

    # The list that the shuffled cards are temporarily stored in.
    shuffled = []

    # Puts all of the cards, randomly reordered, into shuffled.
    for _ in range(len(cards)):
        shuffled.append(
            cards.pop(
                randint(0, len(cards))
            )
        )
    
    # Saves the shuffled cards back into the inputted list, so the same list has the new contents.
    set_list(cards, shuffled)

    return cards

def draw(cards: list, drawnum: int=1, ):
    """
    Draws (and removes) cards from the beginning of a list.
    :arg list cards: The list to draw the cards from.
    :arg int drawnum: The number of cards to draw. You cannot draw more cards than are inside the list.
    """

    # Makes sure that not too many cards are drawn.
    drawnum = min(
        max(1, drawnum),
        len(cards)
    )

    # The list that the drawn cards are temporarily stored in.
    drawn = []
    
    # Draws the cards and puts them into drawn.
    for _ in range(drawnum):
        drawn.append(
            cards.pop(0)
        )
    
    return drawn