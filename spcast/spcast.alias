<drac2>
args = &ARGS&
parsed_args = argparse(args)
ignore = parsed_args.get('i',
    default=False,
    type_=bool)

ch = character()

N = '\n'
CCNAME = 'Spell Points'

points = (0, 2, 3, 5, 6, 7, 9, 10, 11, 13)

# If no spell points exist yet, creates a counter and returns an embed
# detailing the new spell point total.
# Will also return this embed if using !spcast POINTS
if ch.cc_exists(CCNAME):
    spell_points = ch.get_cc(CCNAME)

else:
    # Finds what your spell point total should be.
    points_by_level = (4, 6, 14, 17, 27, 32, 38, 44, 57, 64, 73, 73, 83, 83, 94, 94, 107, 114, 123, 133)
    
    # Stores the number of how many instances of a class/subclass equals one caster level. 
    casting_classes = {
        "Bard": 1,
        "Cleric": 1,
        "Druid": 1,
        "Sorcerer": 1,
        "Wizard": 1,
        "Paladin": 2,
        "Ranger": 2,
        "Fighter (Eldritch Knight)": 3,
        "Rogue (Arcane Trickster": 3
    }

    if ch.get_cvar("casting_classes"):
        casting_classes.update(
            load_json(ch.get_cvar("casting_classes"))
        )
    if uvar_exists("casting_classes"):
        casting_classes.update(
            load_json(get_uvar("casting_classes"))
        )
    if get_svar("casting_classes"):
        casting_classes.update(
            load_json(get_svar("casting_classes"))
        )

    # If a server uses a sorcerer-only rule for spell points, then they can use casting_classes_override to enforce it.
    if get_svar("casting_classes_override"):
        casting_classes = load_json(get_svar("casting_classes_override"))

    caster_level = 0
    my_levels = {}

    for class_, lvl in ch.levels:
        if class_ in casting_classes:
            caster_level += (
                floor(
                    lvl / casting_classes[class_]
                )
            )
    
    if (subclass := ch.get_cvar("subclass")):
        for k, v in load_json(subclass).items():
            for class_, lvl in ch.levels:
            " (" + v + ")"
    else:
        return """embed -title "You haven't run `!level` yet!" -desc "This alias needs to fetch your subclass levels in order to calculate your spell points! To allow it to do so, please subscribe to **Verbose Character Tools** here: https://avrae.io/dashboard/workshop/5f7385fe647bb0a416316d1d and run `!level` at least once." """

    for k, v in my_levels.items():
        caster_level += v

    ch.create_cc("Spell Points",
        minVal="0",
        maxVal=f"{points_by_level[caster_level]}")



</drac2>