<drac2>
N = '\n'
CCNAME = 'Spell Points'
FOOTER_STRING = "!spcast | v1.0.0 | Lovingly made by @""Love-chan#5252"
CHARACTER_PIC = image

args = &ARGS&
parsed_args = argparse(args)
ignore = parsed_args.get('i',
    default=False,
    type_=bool)
ch = character()

# If no spell points exist yet, creates a counter and returns an embed
# detailing the new spell point total.
# Will also return this embed if using !spcast POINTS
if ch.cc_exists(CCNAME) and not "POINTS" in args:
    spell_points = ch.get_cc(CCNAME)

else:
    # Finds what your spell point total should be.
    points_by_level = (0, 4, 6, 14, 17, 27, 32, 38, 44, 57, 64, 73, 73, 83, 83, 94, 94, 107, 114, 123, 133)
    
    # Creates the settings if they don't exist, then loads them.
    ch.set_cvar_nx("spcast_settings", 
        dump_json(
            {
                "include_metamagic_adept": False,
                "include_sorcery_points": False
            }
        )
    )
    spcast_settings = load_json(ch.get_cvar("spcast_settings"))

    # Uses the settings to decide whether to add extra spell points.
    # 2 extra spell points if metamagic adept points are included.
    # Extra spell points equal to Sorcery Points if Sorcery Points are included.
    extra_points = 0
    if spcast_settings["include_metamagic_adept"]:
        extra_points += 2
    if spcast_settings["include_sorcery_points"]:
        if ch.levels.get("Sorcerer") >= 2:
            extra_points += SorcererLevel

    # Stores the number of how many instances of a class/subclass level equals one caster level.
    casting_classes = {
        "Bard": 1,
        "Cleric": 1,
        "Druid": 1,
        "Sorcerer": 1,
        "Wizard": 1,
        "Paladin": 2,
        "Ranger": 2,
        "Fighter (Eldritch Knight)": 3,
        "Rogue (Arcane Trickster)": 3
    }

    # Adds in the homebrewed/extra casting classes if they exist.
    if ch.get_cvar("casting_classes"):
        casting_classes.update(
            load_json(ch.get_cvar("casting_classes"))
        )
    if uvar_exists("casting_classes"):
        casting_classes.update(
            load_json(get_uvar("casting_classes"))
        )
    if get_svar("casting_classes"):
        casting_classes.update(
            load_json(get_svar("casting_classes"))
        )

    # If a server has a casting_classes_override set, it replaces all other :casting_classes: settings.
    if get_svar("casting_classes_override"):
        casting_classes = load_json(get_svar("casting_classes_override"))
        override_msg = N + "**SERVER CASTING_CLASSES OVERRIDE ACTIVE.**" + N + "Allowed classes: " + ", ".join(casting_classes.keys()) + "." + N + N
    else:
        override_msg = ""

    caster_level = 0
    my_levels = {}

    for class_, lvl in ch.levels:
        if class_ in casting_classes:
            my_levels[class_] = floor(
                lvl / casting_classes[class_]
            )        

    if (subclass := ch.get_cvar("subclass")):
        for k, v in load_json(subclass).items():
            if (key := k[:-5] + " (" + v + ")") in casting_classes:
                my_levels[key] = floor(
                    ch.levels.get(k[:-5]) / casting_classes[key]
                )
    else:
        return f"""embed -title "You haven't run `!level` yet!" -desc "This alias needs to fetch your subclass levels in order to calculate your spell points! To allow it to do so, please subscribe to **Verbose Character Tools** here: https://avrae.io/dashboard/workshop/5f7385fe647bb0a416316d1d and run `!level` at least once." -thumb "{CHARACTER_PIC}" -footer "{FOOTER_STRING}" """

    for k, v in my_levels.items():
        caster_level += v

    new_counter = ch.create_cc("Spell Points",
        minVal="0",
        maxVal=f"{points_by_level[caster_level] + extra_points}",
        reset="long"
    )

    return f"""embed -title "New Counter 'Spell Points' Created For {name}." -desc "{override_msg}**Spellcaster Levels**{N + N.join([f'{i}: `{v}`' for i, v in my_levels.items()]) + N + N + new_counter.full_str(True) + N + N}Metamagic Adept Points Included: `{spcast_settings['include_metamagic_adept']}`.{N}Sorcery Points Included: `{spcast_settings['include_sorcery_points']}`.{N+N}If you'd like to include Metamagic Adept points or Sorcery Points in your Spell Points total, edit the appropriate values in your `spcast_settings` cvar to `True`.{N + N}Spell Points will automatically be created if they don't exist, or when using `!spcast POINTS` (POINTS must be in all caps)." -thumb "{CHARACTER_PIC}" -footer "{FOOTER_STRING}" """

# Errors if there are no arguments. Error mentions the help embed.
if not args:
    err("You didn't supply any arguments! Try `!spcast HELP` (in all caps) or `!spcast ?` for help on how to use this alias.")

# Loads all of the spells.
spells = load_json(
    get_gvar("d56885c2-867f-4aba-80f0-f91fef63d38b")
)

# Loads all of the player-created spells.
homebrew_gvars = (load_json(ch.get_cvar("brewspells", "[]"))
                 + load_json(get_uvar("brewspells", "[]"))
                 + load_json(get_svar("brewspells", "[]"))
)

for gvar in homebrew_gvars:
    spells.extend(
        load_json(get_gvar(gvar))
    )

spell = None

for i in spells:
    if args[0].lower() == i.name.lower():
        spell = i
        break

if spell == None:
    for i in spells:
        if args[0].lower() in i.name.lower():
            spell = i
            break

if not spell:
    err(f"""The spell `{args[0]}` couldn't be found. Try spelling it correctly, or making sure it is in your `brewspells` cvar/uvar/svar.""")

if not ignore and spell.name not in character().spellbook:
    err(f"""You don't know that spell! Make sure it's in your spellbook, or try to cast it with `-i` to ignore Spell Point and spellbook requirements.""")

spell_level = max(
    parsed_args.last('l',
        default=0,
        type_=int),
    spell.level
)

casting_points = (0, 2, 3, 5, 6, 7, 9, 10, 11, 13)

points = casting_points[spell_level]

if (extra_points := parsed_args.last("p")):
    try:
        points += int(extra_points)
    except:
        err(f"""`-p {extra_points}` was not a valid input for `-p`. Input must be a whole number. No spell points were expended.""")

if not ignore and spell_points < points:
    return f"""embed -title "{name} doesn't have enough Spell Points to cast {spell.name}!" -desc "`{spell.name}` is a {spell.level}" -thumb "{CHARACTER_PIC}" -footer "{FOOTER_STRING}" """


return "echo Pog"
</drac2>