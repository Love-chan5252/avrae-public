<drac2>
N = '\n'
CCNAME = 'Spell Points'
FOOTER_STRING = "!spcast | v1.0.0 | Lovingly made by @""Love-chan#5252"
CHARACTER_PIC = image

args = &ARGS&
parsed_args = argparse(args)
ignore = parsed_args.get('i',
    default=False,
    type_=bool)
ch = character()

get_functions = [ch.get_cvar, get_uvar, get_svar]

# If no spell points exist yet, creates a counter and returns an embed
# detailing the new spell point total.
# Will also return this embed if using !spcast POINTS
if ch.cc_exists(CCNAME):
    spell_points = ch.get_cc(CCNAME)
else:
    err("**No Spell Points Counter Exists!!** Please manually create one or use `!spellpoints create` to create a counter! Using the alias is highly recommended!")

# Errors if there are no arguments. Error mentions the help embed.
if not args:
    err("You didn't supply any arguments! Try `!spcast HELP` (in all caps) or `!spcast ?` for help on how to use this alias.")
    return f"""embed -title ＂{name} needs help using the `!spcast` alias!＂ -desc ＂＂ """

# Loads the default list of all of the spells.
# A spell is a dictionary.
spells = load_json(
    get_gvar("d56885c2-867f-4aba-80f0-f91fef63d38b")
)

# Loads all of the player-created spells.
homebrew_gvars = []
for func in get_functions:
    homebrew_gvars += load_json(
        func("brewspells", "[]")
    )

# Add the homebrewed spells into the dict :spells:.
for gvar in homebrew_gvars:
    spells.extend(
        load_json(get_gvar(gvar))
    )

spell = None

# Runs first to check for exact matches.
# Checking for exact matches first is necessary in the cases of spells
# like "heal" because other spells such as "healing word" contain its 
# full name.
for i in spells:
    if args[0].lower() == i.name.lower():
        spell = i
        break

# Runs second to check for partial matches.
if spell == None:
    for i in spells:
        if args[0].lower() in i.name.lower():
            spell = i
            break

# Error if no match found.
if not spell:
    err(f"""The spell `{args[0]}` couldn't be found. Try spelling it correctly, or making sure it is in your `brewspells` cvar/uvar/svar.""")

# Error if spell not in spellbook.
# Won't error if `-i` is provided.
if not ignore and spell.name not in character().spellbook:
    err(f"""You don't know that spell! Make sure it's in your spellbook, or try to cast it with `-i` to ignore Spell Point and spellbook requirements.""")

spell_level = min(
    9,
    max(
        parsed_args.last(
            'l',
            default=0,
            type_=int
        ),
    spell.level
    )
)

# The amount of spell points to expend at certain spell levels, up to 9th.
casting_points = (0, 2, 3, 5, 6, 7, 9, 10, 11, 13)

points = casting_points[spell_level]

if (extra_points := parsed_args.last("p")):
    try:
        points += int(extra_points)
    except:
        err(f"""`-p {extra_points}` was not a valid input for `-p`. Input must be a whole number. No spell points were expended.""")

if not ignore and spell_points < points:
    return f"""embed -title "{name} doesn't have enough Spell Points to cast {spell.name}!" -desc "`{spell.name}` is a {spell.level}" -thumb "{CHARACTER_PIC}" -footer "{FOOTER_STRING}" """

# Slices the string of arguments after the alias to exclude the provided name of the spell.
argument_string = " ".join(["＂" + i + "＂" for i in args[1:]])

return f"""cast ＂{spell.name}＂ {argument_string} -i"""
</drac2>