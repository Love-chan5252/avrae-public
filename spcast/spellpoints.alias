<drac2>
N = '\n'
CCNAME = 'Spell Points'
FOOTER_STRING = "!spellpoints | v1.0.0 | Lovingly made by @""Love-chan#5252"
CHARACTER_PIC = image

args = &ARGS&
parsed_args = argparse(args)
ch = character()

get_functions = [ch.get_cvar, get_uvar, get_svar]

# How many spell points a character should have based on their caster levels.
points_by_level = (0, 4, 6, 14, 17, 27, 32, 38, 44, 57, 64, 73, 73, 83, 83, 94, 94, 107, 114, 123, 133)

# Creates the settings if they don't exist, then loads them.
ch.set_cvar_nx("spcast_settings", 
    dump_json(
        {
            "include_metamagic_adept": False,
            "include_sorcery_points": False
        }
    )
)
spcast_settings = load_json(ch.get_cvar("spcast_settings"))

# Uses the settings to decide whether to add extra spell points.
# 2 extra spell points if metamagic adept points are included.
# Extra spell points equal to Sorcery Points if Sorcery Points are included.
extra_points = 0
if spcast_settings["include_metamagic_adept"]:
    extra_points += 2
if spcast_settings["include_sorcery_points"]:
    if ch.levels.get("Sorcerer") >= 2:
        extra_points += SorcererLevel

# Stores the number of how many instances of a class/subclass level equals one caster level.
casting_classes = {
    "Bard": 1,
    "Cleric": 1,
    "Druid": 1,
    "Sorcerer": 1,
    "Wizard": 1,
    "Paladin": 2,
    "Ranger": 2,
    "Fighter (Eldritch Knight)": 3,
    "Rogue (Arcane Trickster)": 3
}

# Adds in the homebrewed/extra casting classes if they exist.
for getvar in get_functions:
    casting_classes.update(
        load_json(
            getvar("casting_classes", "{}")
        )
    )

# If a server has a casting_classes_override set, it replaces all other :casting_classes: settings.
if get_svar("casting_classes_override"):
    casting_classes = load_json(get_svar("casting_classes_override"))
    override_msg = N + "**SERVER CASTING_CLASSES OVERRIDE ACTIVE.**" + N + "Allowed classes: " + ", ".join(casting_classes.keys()) + "." + N + N
else:
    override_msg = ""

caster_level = 0
my_levels = {}

for class_, lvl in ch.levels:
    if class_ in casting_classes:
        my_levels[class_] = floor(
            lvl / casting_classes[class_]
        )        

if (subclass := ch.get_cvar("subclass")):
    for k, v in load_json(subclass).items():
        if (key := k[:-5] + " (" + v + ")") in casting_classes:
            my_levels[key] = floor(
                ch.levels.get(k[:-5]) / casting_classes[key]
            )
else:
    return f"""embed -title ＂You haven't run `!level` yet!＂ -desc ＂This alias needs to fetch your subclass levels in order to calculate your spell points! To allow it to do so, please subscribe to **Verbose Character Tools** here: https://avrae.io/dashboard/workshop/5f7385fe647bb0a416316d1d and run `!level` at least once.＂ -thumb ＂{CHARACTER_PIC}＂ -footer ＂{FOOTER_STRING}＂ """

for k, v in my_levels.items():
    caster_level += v

caster_level = min(
    caster_level,
    20
)

new_counter = ch.create_cc("Spell Points",
    minVal="0",
    maxVal=f"{points_by_level[caster_level] + extra_points}",
    reset="long"
)

return f"""embed -title ＂New Counter 'Spell Points' Created For {name}.＂ -desc ＂{override_msg + new_counter.full_str(True) + N + N}**Spellcaster Levels**{N + N.join([f'{i}: `{v}`' for i, v in my_levels.items()]) + N + N}**Spell Point Settings**{N}Metamagic Adept Points Included: `{spcast_settings['include_metamagic_adept']}`{N}Sorcery Points Included: `{spcast_settings['include_sorcery_points']}`{N + N}If you'd like to include Metamagic Adept points or Sorcery Points in your Spell Points total, edit the appropriate values in your `spcast_settings` cvar to `True`.{N + N}Spell Points will automatically be created if they don't exist, or when using `!spcast POINTS` (POINTS must be in all caps).＂ -thumb ＂{CHARACTER_PIC}＂ -footer ＂{FOOTER_STRING}＂ """
</drac2>